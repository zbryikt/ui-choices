// Generated by LiveScript 1.2.0
angular.module('ui.choices', []).directive('choices', function($compile){
  return {
    restrict: 'E',
    replace: true,
    transclude: true,
    scope: {
      model: '=ngModel',
      id: '='
    },
    template: "<div class='btn-group' ng-transclude></div>",
    link: function(s, e, a){
      var update;
      s.type = a['type'];
      update = function(s, e, v){
        var ref$, d, k, res$, fb;
        ref$ = [s.data, (v && s.data[v]) || {}], d = ref$[0], v = ref$[1];
        res$ = [];
        for (k in d) {
          res$.push(k);
        }
        k = res$;
        if (v.fb || (!s.multi && v.e)) {
          if (v.on) {
            k.map(function(it){
              return d[it].on = false;
            });
            v.on = true;
          }
        } else if (v.e) {
          k.filter(function(it){
            return d[it].fb;
          }).map(function(it){
            return d[it].on = false;
          });
          if (k.filter(function(it){
            return d[it].on;
          }).length === 0) {
            fb = k.filter(function(it){
              return d[it].fb;
            });
            if (fb.length) {
              d[fb[0]].on = true;
            }
          }
        }
        k.map(function(it){
          if (d[it].m) {
            s.$parent[d[it].m] = d[it].on;
          }
          if (d[it].on) {
            return d[it].e.addClass('active');
          } else {
            return d[it].e.removeClass('active');
          }
        });
        if (s.type === "array") {
          return s.model = k.filter(function(it){
            return d[it].on;
          }).map(function(it){
            return d[it].v;
          });
        } else {
          s.model = {};
          return k.map(function(it){
            return s.model[it] = !!d[it].on;
          });
        }
      };
      update(s, e, null);
      e.on('update', function(err, t){
        update(s, e, t);
        return s.$apply();
      });
      return s.$watch('model', function(d){
        var res$, i$, len$, x, k, ref$, v, results$ = [];
        if (!d || (!d.length && s.type === "array")) {
          return;
        }
        if (s.type === "array") {
          res$ = [];
          for (i$ = 0, len$ = d.length; i$ < len$; ++i$) {
            x = d[i$];
            res$.push(x + "");
          }
          d = res$;
        } else {
          d = (function(){
            var results$ = [];
            for (k in d) {
              results$.push(k);
            }
            return results$;
          }()).filter(function(it){
            return d[it];
          });
        }
        for (k in ref$ = s.data) {
          v = ref$[k];
          if (in$(k, d)) {
            v.on = true;
            v.e.addClass('active');
          } else {
            v.on = false;
            v.e.removeClass('active');
          }
          if (v.m) {
            results$.push(s.$parent[v.m] = v.on);
          }
        }
        return results$;
      }, true);
    },
    controller: function($scope, $element){
      $scope.multi = !!$element.attr('multiple');
      $scope.btntype = $element.attr('btn-type');
      this.node = {
        d: {},
        add: function(e, a){
          var v, this$ = this;
          v = a['value'];
          this.d[v] = {
            e: e,
            v: v,
            m: a['ngModel'],
            fb: a['fallback'] !== undefined,
            on: a['active'] !== undefined
          };
          return $scope.$parent.$watch(a['ngModel'], function(u){
            this$.d[v].on = u;
            return setTimeout(function(){
              return e.parent().trigger('update', this$.d[v].v);
            }, 0);
          });
        },
        tgl: function(v){
          return this.d[v].on = !this.d[v].on;
        }
      };
      $scope.data = this.node.d;
      this.isMulti = function(){
        return $scope.multi;
      };
      this.btntype = function(){
        return $scope.btntype;
      };
      return this.scope = function(){
        return $scope;
      };
    }
  };
}).directive('choice', function($compile){
  return {
    restrict: 'E',
    transclude: true,
    replace: true,
    require: "^choices",
    scope: {
      id: '='
    },
    template: "<label class='btn'><span ng-transclude></span></label>",
    link: function(s, e, a, c){
      var that;
      e.addClass((that = a['btnType'])
        ? that
        : (that = c.btntype()) ? that : 'btn-primary');
      c.node.add(e, a);
      return e.on('click', function(){
        var r, v;
        r = c.node.tgl(v = e.attr('value'));
        return setTimeout(function(){
          return e.parent().trigger('update', v);
        }, 0);
      });
    }
  };
});
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}